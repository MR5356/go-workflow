OUT_DIR ?= _output
BIN_DIR := $(OUT_DIR)/bin
PLUGIN_DIR := $(OUT_DIR)/plugin

init:
	@go get -u google.golang.org/protobuf/proto
	@go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
	@go install github.com/favadi/protoc-go-inject-tag@latest
	@go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

.PHONY: proto
proto:
	@protoc --proto_path=. --go-grpc_out=. --go_out=paths=source_relative:. --go-grpc_opt=paths=source_relative task.proto
	@protoc-go-inject-tag -input="*.pb.go"

.PHONY: test
test: proto deps
	@go test $(shell go list ./... | grep -v /docs) -coverprofile=coverage.out ./...
	# remove files generated by proto
	@sed '/pb.go/d' coverage.out > coverage.out.tmp && mv coverage.out.tmp coverage.out
	go tool cover -func=coverage.out

plugin: proto deps
	go build -ldflags="-w -s" -o $(PLUGIN_DIR)/checkout/checkout ./examples/checkout && cp ./examples/checkout/plugin.yml $(PLUGIN_DIR)/checkout/
	go build -ldflags="-w -s" -o $(PLUGIN_DIR)/sleep/sleep ./examples/sleep && cp ./examples/sleep/plugin.yml $(PLUGIN_DIR)/sleep/
	go build -ldflags="-w -s" -o $(PLUGIN_DIR)/expand/expand ./examples/expand && cp ./examples/expand/plugin.yml $(PLUGIN_DIR)/expand/

.PHONY: deps
deps:
	@go get -v -t -d ./...

clean:
	@rm -rf *.pb.go
	@rm -rf _output